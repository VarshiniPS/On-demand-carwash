/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { BehaviorSubject, from } from 'rxjs';
import { filter, first, map, switchMap } from 'rxjs/operators';
import { isSourceData } from '../interfaces/sources';
import { isAccount, isAccountData, isBankAccount, isBankAccountData, isPii, isPiiData } from '../interfaces/token';
import { isHandleCardPaymentOptions, isPaymentMethodData } from '../interfaces/payment-intent';
export class StripeInstance {
    /**
     * @param {?} loader
     * @param {?} window
     * @param {?} key
     * @param {?=} options
     */
    constructor(loader, window, key, options) {
        this.loader = loader;
        this.window = window;
        this.key = key;
        this.options = options;
        this.stripe$ = new BehaviorSubject(undefined);
        this.loader
            .asStream()
            .pipe(filter((status) => status.loaded === true), first(), map(() => ((/** @type {?} */ (this.window.getNativeWindow()))).Stripe))
            .subscribe((Stripe) => {
            /** @type {?} */
            const stripe = this.options
                ? ((/** @type {?} */ (Stripe(this.key, this.options))))
                : ((/** @type {?} */ (Stripe(this.key))));
            this.stripe$.next(stripe);
        });
    }
    /**
     * @return {?}
     */
    getInstance() {
        return this.stripe$.getValue();
    }
    /**
     * @param {?=} options
     * @return {?}
     */
    elements(options) {
        return this.stripe$.asObservable().pipe(filter(stripe => Boolean(stripe)), map(stripe => ((/** @type {?} */ (stripe))).elements(options)), first());
    }
    /**
     * @param {?} a
     * @param {?} b
     * @return {?}
     */
    createToken(a, b) {
        return this.stripe$.asObservable().pipe(filter(stripe => Boolean(stripe)), switchMap(s => {
            /** @type {?} */
            const stripe = (/** @type {?} */ (s));
            if (isAccount(a) && isAccountData(b)) {
                return from(stripe.createToken(a, b));
            }
            else if (isBankAccount(a) && isBankAccountData(b)) {
                return from(stripe.createToken(a, b));
            }
            else if (isPii(a) && isPiiData(b)) {
                return from(stripe.createToken(a, b));
            }
            else {
                return from(stripe.createToken((/** @type {?} */ (a)), (/** @type {?} */ (b))));
            }
        }), first());
    }
    /**
     * @param {?} a
     * @param {?=} b
     * @return {?}
     */
    createSource(a, b) {
        return this.stripe$.asObservable().pipe(filter(stripe => Boolean(stripe)), switchMap(s => {
            /** @type {?} */
            const stripe = (/** @type {?} */ (s));
            if (isSourceData(a)) {
                return from(stripe.createSource((/** @type {?} */ (a))));
            }
            return from(stripe.createSource((/** @type {?} */ (a)), b));
        }), first());
    }
    /**
     * @param {?} source
     * @return {?}
     */
    retrieveSource(source) {
        return this.stripe$.asObservable().pipe(filter(stripe => Boolean(stripe)), switchMap(s => {
            /** @type {?} */
            const stripe = (/** @type {?} */ (s));
            return from(stripe.retrieveSource(source));
        }), first());
    }
    /**
     * @param {?} options
     * @return {?}
     */
    paymentRequest(options) {
        /** @type {?} */
        const stripe = this.getInstance();
        if (stripe) {
            return stripe.paymentRequest(options);
        }
        return undefined;
    }
    /**
     * @param {?} a
     * @param {?} b
     * @param {?=} c
     * @return {?}
     */
    handleCardPayment(a, b, c) {
        return this.stripe$.asObservable().pipe(filter(stripe => Boolean(stripe)), switchMap(s => {
            /** @type {?} */
            const stripe = (/** @type {?} */ (s));
            if (isHandleCardPaymentOptions(b)) {
                return from(stripe.handleCardPayment((/** @type {?} */ (a)), (/** @type {?} */ (b))));
            }
            return from(stripe.handleCardPayment((/** @type {?} */ (a)), (/** @type {?} */ (b)), (/** @type {?} */ (c))));
        }));
    }
    /**
     * @param {?} a
     * @return {?}
     */
    handleCardAction(a) {
        return this.stripe$.asObservable().pipe(filter(stripe => Boolean(stripe)), switchMap(s => {
            /** @type {?} */
            const stripe = (/** @type {?} */ (s));
            return from(stripe.handleCardAction((/** @type {?} */ (a))));
        }));
    }
    /**
     * @param {?} a
     * @param {?=} b
     * @return {?}
     */
    confirmPaymentIntent(a, b) {
        return this.stripe$.asObservable().pipe(filter(stripe => Boolean(stripe)), switchMap(s => {
            /** @type {?} */
            const stripe = (/** @type {?} */ (s));
            return from(stripe.confirmPaymentIntent((/** @type {?} */ (a)), (/** @type {?} */ (b))));
        }));
    }
    /**
     * @param {?} a
     * @param {?} b
     * @param {?=} c
     * @return {?}
     */
    createPaymentMethod(a, b, c) {
        return this.stripe$.asObservable().pipe(filter(stripe => Boolean(stripe)), switchMap(s => {
            /** @type {?} */
            const stripe = (/** @type {?} */ (s));
            return from(stripe.createPaymentMethod(a, b, c));
        }), first());
    }
    /**
     * @param {?} a
     * @param {?=} b
     * @param {?=} c
     * @return {?}
     */
    handleCardSetup(a, b, c) {
        return this.stripe$.asObservable().pipe(filter(stripe => Boolean(stripe)), switchMap(s => {
            /** @type {?} */
            const stripe = (/** @type {?} */ (s));
            if (isPaymentMethodData(c)) {
                return from(stripe.handleCardSetup(a, (/** @type {?} */ (b)), (/** @type {?} */ (c))));
            }
            return from(stripe.handleCardSetup(a, (/** @type {?} */ (b))));
        }));
    }
}
if (false) {
    /**
     * @type {?}
     * @private
     */
    StripeInstance.prototype.stripe$;
    /** @type {?} */
    StripeInstance.prototype.loader;
    /** @type {?} */
    StripeInstance.prototype.window;
    /** @type {?} */
    StripeInstance.prototype.key;
    /** @type {?} */
    StripeInstance.prototype.options;
}
//# sourceMappingURL=data:application/json;base64,